PROTOTYPE 1 (COMPLETE):
* be able to add stuff to a pandas dataframe
* that's literally it

* first be able to add literally anything to a graph (pandas dataframe)
* then figure out how to make houses in terms of graph data
* then put them on the axes by plotting
* figure out how to plot with constraints: between the red line boundary lines, road/house constraints, entrance area
* Self-drawing is just randomised plotting
* at this point we can move on to Prototype 2, which is finding the optimal plot

* I can add "houses" and "roads" to a plot (they're just Polygons).
* Constraints can be moved to Prototype 2 and can be implemented in terms of overlapping equations and regions.
* CRS stuff is confusing.



PROTOTYPE 2 (CURRENT):
* Make lines representing the edges of the rlp
* Use lines to generate random houses and roads, maybe with linspace, generalised to any data.geojson file
* Implement constraints in random generation (straight roads, houses facing roads, and entry to rlp)



PROTOTYPE 3:
* Take user input for house and road basic constraints (like size, cost, shape, etc.)
* Optimise on constraints for optimal ratio of houses and roads
* Try to automate plotting of this on the rlp




PROTOTYPE 4 (NEARLY COMPLETE):
* "RedLinePlot.py"
* Call "makeEmptyMap()" to open a web page containing a world map (not yet real time)
* Select the polygon option on the map to draw a polygon (red line plot), then export this as a .geojson file (should be more intuitive on a website)
* Call "openRLP()" with path to the .geojson file as a parameter to create a graph of the red line plot
* All that's left for this prototype is to put it on a website, non-essential task