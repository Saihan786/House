PROTOTYPE 1 (CURRENT):
* DONE Allow user to create classes for different types of houses and roads, where each class has distinct properties (house (rectangle) - profit (revenue-cost implied), size, length, width) (roads - cost, width)
* Problem with curved roads


PROTOTYPE 2 (CURRENT):
* DONE Find way to ensure houses and roads stay within rlp
* TODO Generate houses and roads to be plotted within rlp:
    * (already generalised to any data.geojson file)
    * Use house types and road types from Prototype 1
    * Optimise for total profit against total cost of generation for any given generation (should return multiple possible generations)
* TODO Implement constraints (straight roads, houses facing roads, no overlapping of course, and entry to rlp)
* TODO Attempt to plot generation within rlp adhering to the constraints I've implemented by then, use a different generation if it's not possible
    * Every attempt that the computer makes to plot a generation is randomised, or all attempts are exhaustive (might not be feasible, so might do random attempts for a given time period until it declares failure)



PROTOTYPE 3:
* Take user input for house and road basic constraints (like size, cost, shape, etc.)
* Optimise on constraints for optimal ratio of houses and roads
* Try to automate plotting of this on the rlp




PROTOTYPE 4 (NEARLY COMPLETE):
* "RedLinePlot.py"
* Call "makeEmptyMap()" to open a web page containing a world map (not yet real time)
* Select the polygon option on the map to draw a polygon (red line plot), then export this as a .geojson file (should be more intuitive on a website)
* Call "openRLP()" with path to the .geojson file as a parameter to create a graph of the red line plot
* All that's left for this prototype is to put it on a website, non-essential task